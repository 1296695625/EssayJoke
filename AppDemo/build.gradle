apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin
//阿里云仓库配置
repositories {
    mavenLocal()
    //阿里云仓库
    maven {
        url "http://maven.aliyun.com/nexus/content/repositories/releases"
    }
    mavenCentral()
    jcenter()
    flatDir {
        dirs 'libs'
    }
}

android {
    compileSdkVersion rootProject.ext.common.compileSdkVersion
    buildToolsVersion rootProject.ext.common.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.common.minSdkVersion
        targetSdkVersion rootProject.ext.common.targetSdkVersion
        applicationId rootProject.ext.AppDemo.applicationId
        versionCode rootProject.ext.AppDemo.versionCode
        versionName rootProject.ext.AppDemo.versionName

        flavorDimensions "versionCode"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //ARouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        //ndk配置
//        ndk {
//            // Specifies the ABI configurations of your native
//            // libraries Gradle should build and package with your APK.
//            abiFilters 'armeabi-v7a', 'arm64-v8a'
//            abiFilters 'armeabi-v7a', 'arm64-v8a','x86','x86_64'
//        }
        //分包
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding "UTF-8"
    }

    buildTypes {
        debug {
            minifyEnabled false
////            zipAlignEnabled
////            shrinkResources
////            debuggable
////            versionNameSuffix
//            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
//            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jni.srcDirs = ['src/main/jni', 'src/main/cpp/']
            jniLibs.srcDirs = ['libs']  //配置生成jniLibs
        }
    }

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }

    repositories {
        // 本地的libs目录
        flatDir {
            dirs 'libs' //aar目录
        }
    }

    /**
     * 多渠道打包
     */
    productFlavors {
        kuan {
            //这里可以配置不同的包名
//            applicationId="com.cn"
            applicationIdSuffix ".kuan"
            //这里是在 applicationId 中添加了一个后缀
//            manifestPlaceholders = [app_icon: "@mipmap/login_logo",
//                                    app_name: "app1"]
            manifestPlaceholders = [app_name: "kuan"]
        }

        xiaomi {
            applicationIdSuffix ".xiaomi"
            manifestPlaceholders = [app_name: "xiaomi"]
        }

        qh360 {
            applicationIdSuffix ".qh360"
            manifestPlaceholders = [app_name: "qh360"]
        }

        baidu {
            applicationIdSuffix ".baidu"
            manifestPlaceholders = [app_name: "baidu"]
        }
    }

    signingConfigs {

        //正式版签名
        release {
            keyAlias 'qiyei2015'
            keyPassword '510726'
            storeFile file('../android_keystore.jks')
            storePassword '510726'
        }

        //调试版签名
        debug {

        }
    }

    //解决国际化资源文件不全
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    greendao {
        schemaVersion 1
//        daoPackage 'com.qiyei.funny.greendao.gen'
//        targetGenDir 'src/main/java'
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')

    api "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    api "com.android.support:design:$support_design_version"
    api "android.arch.lifecycle:runtime:$lifecycle_runtime_version"
    api "android.arch.lifecycle:extensions:$lifecycle_extensions_version"

    annotationProcessor "android.arch.lifecycle:compiler:$lifecycle_compiler_version"
    api "android.arch.persistence.room:runtime:$room_runtime_version"
    annotationProcessor "android.arch.persistence.room:compiler:$room_compiler_version"
    testImplementation "android.arch.persistence.room:testing:$room_testing_version"

    api "com.aliyun.ams:alicloud-android-hotfix:$hotfix_version"

    androidTestImplementation("com.android.support.test.espresso:espresso-core:$support_test_espresso_espresso_core_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    api "com.android.support:appcompat-v7:$appcompat_v7_version"
    testImplementation "junit:junit:$junit_version"

    api "com.android.support:multidex:$support_multidex_version"

    //dagger2
    api "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger:$dagger_compiler_version"

    //ARouter
    annotationProcessor "com.alibaba:arouter-compiler:$arouter_compiler_version"

    api project(':Router')

    api project(':ModuleA')
    api project(':Framework')
    api project(':ioc-annotation')
    annotationProcessor project(':ioc-compiler')

    api project(':Cordova')
    api project(':ReactNative')
    api project(':Scan')
}
