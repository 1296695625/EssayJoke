apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin
//阿里云仓库配置
repositories {
    mavenLocal()
    //阿里云仓库
    maven {
        url "http://maven.aliyun.com/nexus/content/repositories/releases"
    }
    mavenCentral()
    jcenter()
    flatDir {
        dirs 'libs'
    }
    maven {
        url 'https://maven.google.com/'
        name 'Google'
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        applicationId "com.qiyei.appdemo"
        versionCode 1
        versionName "1.0.0"

        flavorDimensions "versionCode"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //ndk配置
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            abiFilters 'armeabi', 'armeabi-v7a'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jni.srcDirs = ['src/main/jni', 'src/main/cpp/']
            jniLibs.srcDirs = ['libs']  //配置生成jniLibs
        }
    }

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }

    repositories {
        // 本地的libs目录
        flatDir {
            dirs 'libs' //aar目录
        }
    }

    /**
     * 多渠道打包
     */
    productFlavors {
        kuan {
            //这里可以配置不同的包名
//            applicationId="com.cn"
            applicationIdSuffix ".kuan"
            //这里是在 applicationId 中添加了一个后缀
//            manifestPlaceholders = [app_icon: "@mipmap/login_logo",
//                                    app_name: "app1"]
            manifestPlaceholders = [app_name: "kuan"]
        }

        xiaomi {
            applicationIdSuffix ".xiaomi"
            manifestPlaceholders = [app_name: "xiaomi"]
        }

        qh360 {
            applicationIdSuffix ".qh360"
            manifestPlaceholders = [app_name: "qh360"]
        }

        baidu {
            applicationIdSuffix ".baidu"
            manifestPlaceholders = [app_name: "baidu"]
        }
    }

//    signingConfigs {
//        config {
//            keyAlias 'qiyei2015'
//            keyPassword '510726'
//            storeFile file('F:\\android_project\android_keystore.jks')
//            storePassword '510726'
//        }
//    }

    //解决国际化资源文件不全
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    greendao {
        schemaVersion 1
//        daoPackage 'com.qiyei.funny.greendao.gen'
//        targetGenDir 'src/main/java'
    }
}

dependencies {
    api 'com.android.support.constraint:constraint-layout:1.0.2'
    api 'com.android.support:design:27.0.2'
    api "android.arch.lifecycle:runtime:1.0.0"
    api "android.arch.lifecycle:extensions:1.0.0"
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0"
    api "android.arch.persistence.room:runtime:1.0.0"
    annotationProcessor "android.arch.persistence.room:compiler:1.0.0"
    testImplementation "android.arch.persistence.room:testing:1.0.0"
    api fileTree(include: ['*.jar'], dir: 'libs')
    api 'com.aliyun.ams:alicloud-android-hotfix:3.1.3'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    api 'com.android.support:appcompat-v7:26.0.0'
    testImplementation 'junit:junit:4.12'
    api project(':Framework')
    api project(':ioc-annotation')
    annotationProcessor project(':ioc-compiler')
}
